@import '../shared/variables.less';
@import '../shared/functions.less';

.direction(@animationName, @isSibling: false) {
  @directions: ltr, rtl, ttb, btt;

  each(@directions, {
    @resultClass: if(@isSibling, ~'&.@{value}', ~'.@{value}');

    .@{namespace}-@{animationName} {
      &-enter-active,
      &-leave-active {
        @{resultClass} {
          @apply transition-transform;
          transition-duration: .getCssVar(transition-duration) [];
        }
      }
      &-enter-from,
      &-leave-to {
        @{resultClass} when (@value = ltr) {
          .setCssVar(direction-translate-x, -100%);
        }
        @{resultClass} when (@value = rtl) {
          .setCssVar(direction-translate-x, 100%);
        }
        @{resultClass} when (@value = ttb) {
          .setCssVar(direction-translate-y, -100%);
        }
        @{resultClass} when (@value = btt) {
          .setCssVar(direction-translate-y, 100%);
        }
      }
    }
  });

  .direction-only(@isSibling);
}

.direction-only(@isSibling: false) {
  each(@directions, {
    @resultClass:if(@isSibling, ~'&.@{value}', ~'.@{value}');

    @{resultClass} {
      .setCssVar(direction-translate-x, 0);
      .setCssVar(direction-translate-y, 0);
      transform: translate3d(.getCssVar(direction-translate-x) [], .getCssVar(direction-translate-y) [], 0);
      @apply absolute;
    }
    @{resultClass} when (@value = ltr), (@value = rtl) {
      @apply top-0 bottom-0;
    }
    @{resultClass} when (@value = ttb), (@value = btt) {
      @apply left-0 right-0;
    }
    @{resultClass} when (@value = ltr) {
      @apply left-0;
    }
    @{resultClass} when (@value = rtl) {
      @apply right-0;
    }
    @{resultClass} when (@value = ttb) {
      @apply top-0;
    }
    @{resultClass} when (@value = btt) {
      @apply bottom-0;
    }
  });
}
