@import './shared/functions.less';
@import './shared/variables.less';

:root {
    .setCssVar(color-white, @color-white);
    .setCssVar(color-black, @color-black);
    each(#colorsMap(), {
        .defineLevelOpacityColor(@value, @key);
    });
    .setCssVarMap(transition, #transitionMap());
    .setCssVarMap(border, #borderMap());
    .setCssVarMap(shadow, #shadowMap());
}

:root {
    each(#colorsMap(), {
        .defineLevelColor(@value, @key, @color-white);
    });

    .setCssVarMap(bg-color, #bgColor());
    .setCssVarMap(text-color, #textColorsMap());
    .setCssVarMap(fill-color, #colorsFillMap());
    .setCssVarMap(border-color, #borderColorsMap());
    .setCssVarMap(shadow-color, #shadowColorsMap());
}
:root.dark {
    #textColorsMap() {
        primary: #e5eaf3;
        regular: #cfd3dc;
        secondary: #a3a6ad;
        placeholder: #8d9095;
        disabled: #6c6e72;
    }

    #colorsFillMap() {
        background: fadeout(@color-white, 95%);
    }

    #borderColorsMap() {
        base: rgba(@color-white, 0.25);
        each(range(2), {
            light-@{value}: rgba(@color-white, 0.25 - @value * 0.05);
            dark-@{value}: rgba(@color-white, 0.25 + @value * 0.05);
        });
    }

    #bgColor() {
        base: #181a1b;
    }

    #shadowColorsMap() {
        base: rgba(@color-black, 0.7);
        each(range(2), {
            light-@{value}: rgba(@color-black, 0.7 - @value * 0.1);
            dark-@{value}: rgba(@color-black, 0.7 + @value * 0.1);
        });
    }

    each(#colorsMap(), {
        .defineLevelColor(@value, @key, @color-black);
    });

    .setCssVarMap(bg-color, #bgColor());
    .setCssVarMap(text-color, #textColorsMap());
    .setCssVarMap(fill-color, #colorsFillMap());
    .setCssVarMap(border-color, #borderColorsMap());
    .setCssVarMap(shadow-color, #shadowColorsMap());
}
